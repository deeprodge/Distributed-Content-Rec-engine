version: '3.8'

services:
  # Config Servers
  cfg1:
    image: mongo
    container_name: cfg1
    command: mongod --configsvr --replSet rs_config --port 27017 --bind_ip_all
    volumes:
      - ./data/cfg1:/data/db
    networks:
      - mongo_net

  cfg2:
    image: mongo
    container_name: cfg2
    command: mongod --configsvr --replSet rs_config --port 27017 --bind_ip_all
    volumes:
      - ./data/cfg2:/data/db
    networks:
      - mongo_net

  cfg3:
    image: mongo
    container_name: cfg3
    command: mongod --configsvr --replSet rs_config --port 27017 --bind_ip_all
    volumes:
      - ./data/cfg3:/data/db
    networks:
      - mongo_net

  # Shard 1 Replica Set
  shard1_1:
    image: mongo
    container_name: shard1_1
    command: mongod --shardsvr --replSet rs_shard1 --port 27017 --bind_ip_all
    volumes:
      - ./data/shard1_1:/data/db
    networks:
      - mongo_net

  shard1_2:
    image: mongo
    container_name: shard1_2
    command: mongod --shardsvr --replSet rs_shard1 --port 27017 --bind_ip_all
    volumes:
      - ./data/shard1_2:/data/db
    networks:
      - mongo_net

  shard1_3:
    image: mongo
    container_name: shard1_3
    command: mongod --shardsvr --replSet rs_shard1 --port 27017 --bind_ip_all
    volumes:
      - ./data/shard1_3:/data/db
    networks:
      - mongo_net

  shard2_1:
    image: mongo
    container_name: shard2_1
    command: mongod --shardsvr --replSet rs_shard2 --port 27017 --bind_ip_all
    volumes:
      - ./data/shard2_1:/data/db
    networks:
      - mongo_net

  shard2_2:
    image: mongo
    container_name: shard2_2
    command: mongod --shardsvr --replSet rs_shard2 --port 27017 --bind_ip_all
    volumes:
      - ./data/shard2_2:/data/db
    networks:
      - mongo_net

  shard2_3:
    image: mongo
    container_name: shard2_3
    command: mongod --shardsvr --replSet rs_shard2 --port 27017 --bind_ip_all
    volumes:
      - ./data/shard2_3:/data/db
    networks:
      - mongo_net

  # Shard 3 Replica Set
  shard3_1:
    image: mongo
    container_name: shard3_1
    command: mongod --shardsvr --replSet rs_shard3 --port 27017 --bind_ip_all
    volumes:
      - ./data/shard3_1:/data/db
    networks:
      - mongo_net

  shard3_2:
    image: mongo
    container_name: shard3_2
    command: mongod --shardsvr --replSet rs_shard3 --port 27017 --bind_ip_all
    volumes:
      - ./data/shard3_2:/data/db
    networks:
      - mongo_net

  shard3_3:
    image: mongo
    container_name: shard3_3
    command: mongod --shardsvr --replSet rs_shard3 --port 27017 --bind_ip_all
    volumes:
      - ./data/shard3_3:/data/db
    networks:
      - mongo_net

  # Router (mongos)
  router:
    image: mongo
    container_name: router
    command: mongos --configdb rs_config/cfg1:27017,cfg2:27017,cfg3:27017 --bind_ip_all
    ports:
      - "27017:27017"
    depends_on:
      - cfg1
      - cfg2
      - cfg3
      - shard1_1
      - shard1_2
      - shard1_3
      - shard2_1
      - shard2_2
      - shard2_3
      - shard3_1
      - shard3_2
      - shard3_3
    networks:
      - mongo_net
    extra_hosts:
      - host.docker.internal:host-gateway

  neo4j:
    image: neo4j:latest
    container_name: neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/DiscoDeewaneS
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4JLABS_PLUGINS=["apoc"]
    volumes:
      - ./neo4j/data:/data
      - ./neo4j/import:/import
    networks:
      - mongo_net

  # # Dummy Linux container
  # dummy:
  #   image: httpd:alpine  # Use the official Apache HTTP server image
  #   container_name: dummy_container
  #   ports:
  #     - "1010:80"  # Map port 1010 on the host to port 80 in the container
  #   networks:
  #     - mongo_net

networks:
  mongo_net:
    driver: bridge
